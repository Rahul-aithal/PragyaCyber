import z from "zod";

// Define Zod schema for validation
export const vulnerabilitySchema = z.object({
  vid: z
    .string()
    .min(1, "Vulnerability ID is required")
    .refine((val) => !val.includes("--") && !val.includes("';"), {
      message: "String contains potentially malicious characters",
    }),
  name: z
    .string()
    .min(1, "Name is required")
    .refine((val) => !val.includes("--") && !val.includes("';"), {
      message: "String contains potentially malicious characters",
    }),
  desc: z
    .string()
    .min(1, "Description is required")
    .refine((val) => !val.includes("--") && !val.includes("';"), {
      message: "String contains potentially malicious characters",
    }),
  pass: z.boolean().optional().default(false),
  fail: z.boolean().optional().default(false),
  reference: z
    .string()
    .min(1, "Reference is required")
    .refine((val) => !val.includes("--") && !val.includes("';"), {
      message: "String contains potentially malicious characters",
    }),
});

type vulnerabilityType = z.infer<typeof vulnerabilitySchema>;

export default vulnerabilityType;
