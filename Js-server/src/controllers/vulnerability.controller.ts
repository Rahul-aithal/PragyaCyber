import Report from "../models/Report.model";
import Vulnerability from "../models/Vulnerability.model";
import vulnerabilityType, {
  vulnerabilitySchema,
} from "../types/vulnerability.type";
import { ApiError } from "../utils/ApiError";
import { ApiResponse } from "../utils/ApiResponse";
import { asyncHandler } from "../utils/asyncHandlers";
import { Request, Response } from "express";

// Create a new vulnerability
export const createVulnerability = asyncHandler(
  async (req: Request, res: Response) => {
    const { vid, name, desc, pass, fail, reference }: vulnerabilityType =
      req.body;
    const reportId = res.locals.report;
    await vulnerabilitySchema.parseAsync({
      vid,
      name,
      desc,
      pass,
      fail,
      reference,
    });

    const vulnerability = await Vulnerability.create({
      vid,
      name,
      desc,
      pass,
      fail,
      reference,
    });

    if (!vulnerability) {
      throw new ApiError(500, "Failed to create vulnerability");
    }

    await Report.findByIdAndUpdate(reportId, {
      $push: { vulnerabilities: vulnerability._id },
    });

    res.status(201).json(new ApiResponse(201, vulnerability._id));
  }
);

// Get all vulnerabilities
export const getAllVulnerabilities = asyncHandler(
  async (_req: Request, res: Response) => {
    const vulnerabilities = await Vulnerability.find();

    res.status(200).json(new ApiResponse(200, vulnerabilities));
  }
);

// Get a specific vulnerability by ID
export const getVulnerabilityById = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;

    if (!id) {
      throw new ApiError(400, "Vulnerability ID is required");
    }

    const vulnerability = await Vulnerability.findById(id);

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }

    res.status(200).json(new ApiResponse(200, vulnerability));
  }
);

// Get a vulnerability by VID
export const getVulnerabilityByVid = asyncHandler(
  async (req: Request, res: Response) => {
    const { vid } = req.params;

    if (!vid) {
      throw new ApiError(400, "Vulnerability ID (VID) is required");
    }

    const vulnerability = await Vulnerability.findOne({ vid });

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }

    res.status(200).json(new ApiResponse(200, vulnerability));
  }
);

// Update a vulnerability
export const updateVulnerability = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const { vid, name, desc, pass, fail, reference } = req.body;

    if (!id) {
      throw new ApiError(400, "Vulnerability ID is required");
    }

    await vulnerabilitySchema.parseAsync({
      vid,
      name,
      desc,
      pass,
      fail,
      reference,
    });

    const vulnerability = await Vulnerability.findByIdAndUpdate(
      id,
      {
        $set: {
          vid,
          name,
          desc,
          pass,
          fail,
          reference,
        },
      },
      { new: true }
    );

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }

    res.status(200).json(new ApiResponse(200, vulnerability._id));
  }
);

// Delete a vulnerability
export const deleteVulnerability = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;
    const reportId = res.locals.report;
    if (!id) {
      throw new ApiError(400, "Vulnerability ID is required");
    }

    const vulnerability = await Vulnerability.findByIdAndDelete(id);

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }
    await Report.findByIdAndUpdate(reportId, {
      $pullAll: { vulnerabilities: vulnerability._id },
    });
    res.status(200).json(new ApiResponse(200, vulnerability._id));
  }
);

// Toggle vulnerability pass status
export const toggleVulnerabilityPass = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;

    if (!id) {
      throw new ApiError(400, "Vulnerability ID is required");
    }

    const vulnerability = await Vulnerability.findById(id);

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }

    vulnerability.pass = !vulnerability.pass;

    // If pass is true, fail should be false
    if (vulnerability.pass) {
      vulnerability.fail = false;
    }

    await vulnerability.save();

    res.status(200).json(new ApiResponse(200, vulnerability._id));
  }
);

// Toggle vulnerability fail status
export const toggleVulnerabilityFail = asyncHandler(
  async (req: Request, res: Response) => {
    const { id } = req.params;

    if (!id) {
      throw new ApiError(400, "Vulnerability ID is required");
    }

    const vulnerability = await Vulnerability.findById(id);

    if (!vulnerability) {
      throw new ApiError(404, "Vulnerability not found");
    }

    vulnerability.fail = !vulnerability.fail;

    // If fail is true, pass should be false
    if (vulnerability.fail) {
      vulnerability.pass = false;
    }

    await vulnerability.save();

    res.status(200).json(new ApiResponse(200, vulnerability._id));
  }
);
