import { asyncHandler } from "../utils/asyncHandlers";
import { ApiResponse } from "../utils/ApiResponse";
import { ApiError } from "../utils/ApiError";
import { Request, Response } from "express";
import vulnerabilityDetailType, {
  vulnerabilityDetailSchema,
} from "../types/vulnerabillityDetails.type";
import VulnerabilityDetail from "../models/VulnerabilityDetail.model";

// Get all the required values for vulnerability details
// Parse for checking all the values
// Then Create a document
// Return ID of the Doc
const createVulnerabilityDetails = asyncHandler(
  async (req: Request, res: Response) => {
    const {
      name,
      cvssScore,
      desc,
      evidences,
      impacts,
      mitigations,
    }: vulnerabilityDetailType = req.body;

    await vulnerabilityDetailSchema.parseAsync({
      name,
      cvssScore,
      desc,
      evidences,
      impacts,
      mitigations,
    });

    const vulnerability = await VulnerabilityDetail.create({
      name,
      cvssScore,
      desc,
      evidences,
      impacts,
      mitigations,
    });

    await vulnerability.save();

    res.status(200).json(new ApiResponse(200, vulnerability._id, "Success"));
  }
);

// Get all the required values for vulnerability details, With Id
// Parse for checking all the values and for id
// Then Update the document
// Return ID of the Doc
const updateVulnerabilityDetails = asyncHandler(
  async (req: Request, res: Response) => {
    const {
      name,
      cvssScore,
      desc,
      evidences,
      impacts,
      mitigations,
      id,
    }: vulnerabilityDetailType & { id: string } = req.body;

    if (!id) {
      throw new ApiError(400, "⚠️ Id not found");
    }

    await VulnerabilityDetail.updateOne(
      { _id: id },
      {
        $set: {
          name,
          cvssScore,
          desc,
          evidences,
          impacts,
          mitigations,
        },
      }
    );

    res.status(200).json(new ApiResponse(200, id, "Success"));
  }
);

// Get ID
// Then Delete the document, else throw err
// Return ID of the Doc
const deleteVulnerabilityDetails = asyncHandler(
  async (req: Request, res: Response) => {
    const { id }: { id: string } = req.body;

    if (!id) {
      throw new ApiError(400, "⚠️ Id not found");
    }

    const vulenrabilityDetails = await VulnerabilityDetail.deleteOne({
      _id: id,
    });

    if (!vulenrabilityDetails) {
      throw new ApiError(404, "This file is not found");
    }

    res.status(200).json(new ApiResponse(200, id, "Success"));
  }
);

export {
  createVulnerabilityDetails,
  updateVulnerabilityDetails,
  deleteVulnerabilityDetails,
};
